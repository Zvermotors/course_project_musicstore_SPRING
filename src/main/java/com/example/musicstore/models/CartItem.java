package com.example.musicstore.models;

import lombok.Data;
import java.math.BigDecimal;

/**
 * Класс CartItem представляет элемент корзины покупок.
 * Содержит информацию о товаре, добавляемом в корзину, включая его идентификатор,
 * название, изображение, цену, количество и статус доступности.
 * Используется для временного хранения данных о товарах в корзине перед оформлением заказа.
 */
@Data // Аннотация Lombok для автоматической генерации геттеров, сеттеров, toString, equals и hashCode
public class CartItem {

    /**
     * Уникальный идентификатор товара в системе
     * Используется для связи с объектом Product в базе данных
     */
    private Long productId;

    /**
     * Название товара для отображения в корзине
     */
    private String productName;

    /**
     * Путь к изображению товара
     * Используется для отображения картинки товара в интерфейсе корзины
     */
    private String imagePath;

    /**
     * Цена товара за единицу
     * Тип BigDecimal используется для точных денежных расчетов без ошибок округления
     */
    private BigDecimal price;

    /**
     * Количество данного товара в корзине
     * По умолчанию устанавливается в 1 при создании элемента корзины
     */
    private int quantity;

    /**
     * Статус товара (например: AVAILABLE, OUT_OF_STOCK, DISCONTINUED)
     * Определяет доступность товара для покупки
     */
    private Product.ProductStatus status;

    /**
     * Конструктор для создания элемента корзины на основе объекта Product
     * @param product объект товара, на основе которого создается элемент корзины
     */
    public CartItem(Product product) {
        this.productId = product.getId(); // Установка ID товара
        this.productName = product.getName(); // Установка названия товара
        this.imagePath = product.getImagePath(); // Установка пути к изображению
        this.price = BigDecimal.valueOf(product.getPrice()); // Конвертация цены в BigDecimal
        this.quantity = 1; // Установка начального количества (1 единица)
        this.status = product.getStatus(); // Установка статуса товара
    }
}

//Полное описание класса:
//
//Назначение:
//Класс CartItem является моделью данных, представляющей товар в корзине покупок. Он служит промежуточным объектом между сущностью Product и корзиной пользователя, содержа только необходимую для отображения и расчета информацию.
//
//Ключевые особенности:
//
//Упрощенное представление товара - содержит только основные поля для отображения в корзине
//
//Независимость от БД - не является JPA-сущностью, используется для сессионных данных
//
//Автоматическое начальное количество - при создании устанавливается quantity = 1
//
//Контроль статуса товара - позволяет проверять доступность товара при оформлении заказа
//
//Типичное использование:
//
//Хранение товаров в корзине пользователя во время сессии
//
//Отображение списка товаров в корзине с основной информацией
//
//Расчет общей стоимости заказа
//
//Проверка доступности товаров перед оформлением заказа
//
//Преимущества использования:
//
//Легковесность - содержит только необходимые данные для корзины
//
//Безопасность - отделен от основной сущности Product
//
//Удобство - автоматическая инициализация полей из объекта Product
//
//Сериализуемость - может легко сохраняться в сессии или преобразовываться в JSON
//
//Важные аспекты:
//
//Объекты CartItem обычно хранятся в сессии пользователя
//
//При изменении данных оригинального Product необходимо обновлять соответствующие CartItem
//
//Статус товара проверяется при оформлении заказа для предотвращения заказа недоступных товаров